-
	function capitalize(str) {
		return str.length > 1
			? [
				str.charAt(0).toUpperCase(),
				str.slice(1).toLowerCase()
			]
				.join("")
			: str.toUpperCase()
	}
-
	function upper(str) {
		return str.toUpperCase()
	}
-
	function lower(str) {
		return str.toLowerCase()
	}
-
	uni = [
		{
			_: "\u0301",
			d: "\u00F0",
			n: "\u014B",
			t: "\u00FE",
		},
		{
			_: "\u030C",
		},
	];
-
	function fmt(str) {
		return str
			.replace(
				/(\w)(_{1,2})/g,
				(match, letter, variant) => {
					let out = uni[variant.length - 1][letter.toLowerCase()]
						|| [
							letter,
							uni[variant.length - 1]["_"]
						]
							.join("");
					if (/\p{Lu}/u.test(letter)) {
						return out.toUpperCase()
					} else {
						return out.toLowerCase()
					}
			})
			.normalize("NFC");
	}
-
	neo = [
		[
			"Cascadic",
			"Kaskadik",
			[
				"A",
				"B",
				"C",
				"D",
				"D_",
				"E",
				"E_",
				"F",
				"G",
				"H",
				"I",
				"I_",
				"J",
				"K",
				"L",
				"M",
				"N",
				"N_",
				"O",
				"O_",
				"P",
				"R",
				"S",
				"S_",
				"T",
				"T_",
				"U",
				"U_",
				"U__",
				"V",
				"W",
				"Y",
				"Z",
				"Z_"
			]
		],
		[
			"Stratic",
			"S_ra'tik",
			[]
		]
	]
-
	[
		"B",
		"C",
		"D",
		"D_",
		"F",
		"G",
		"H",
		"J",
		"K",
		"L",
		"M",
		"N",
		"N_",
		"P",
		"R",
		"S",
		"S_",
		"T",
		"T_",
		"V",
		"W",
		"X",
		"Y",
		"Z",
		"Z_"
	].forEach(c => {
		[
			"",
			"A",
			"E",
			"E_",
			"I",
			"I_",
			"O",
			"O_",
			"U",
			"U_"
		].forEach(v => {
			neo[1][2].push(
				capitalize(c+v)
			)
		})
	})
- space = " "
doctype html
html
	head
		title #{fmt("S_ra'tik")} & #{fmt("Kaskadik")}
		style
			|	body {
			|		font: 20pt "Segoe UI"
			|	}
			|	/*table {}*/
	body
		h1 Stratic #{fmt("[S_ra'tik]")}
		table
			-
				vowels = [
					"",
					"A",
					"E",
					"E_",
					"I",
					"I_",
					"O",
					"O_",
					"U",
					"U_"
				]
			-
				consonants = [
					"",
					"B",
					"C",
					"D",
					"D_",
					"F",
					"G",
					"H",
					"J",
					"K",
					"L",
					"M",
					"N",
					"N_",
					"P",
					"R",
					"S",
					"S_",
					"T",
					"T_",
					"V",
					"W",
					"X",
					"Y",
					"Z",
					"Z_"
				]
			for v in vowels
				tr
					for c in consonants
						-
							pair = fmt([
								upper(c || v) || upper("C"),
								lower(v || c) || upper("V")
							].join(""))
						if !v || !c
							th= pair
						else
							td= pair
		h1 Cascadic #{fmt("[Kaskadik]")}
		-
			consonants = [
				"B",
				"C",
				"D",
				"D_",
				"F",
				"G",
				"H",
				"J",
				"K",
				"L",
				"M",
				"N",
				"N_",
				"P",
				"R",
				"S",
				"S_",
				"T",
				"T_",
				"V",
				"W",
				"Y",
				"Z",
				"Z_"
			]
		-
			vowels = [
				"A",
				"E",
				"E_",
				"I",
				"I_",
				"O",
				"O_",
				"U",
				"U_",
				"U__"
			]
		-
			set = [
				["Consonants", consonants],
				["Vowels", vowels]
			]
		for i in set
			h2= i[0]
			ul
				for c in i[1]
					li= capitalize(fmt(c.repeat(2)))
		h1 Notes
		ol
			li For both scripts, diacritics create separate letters, not variants (since latin alphabet variants just add diacritics onto characters to make new ones, unlike cyrillic variants, which, generally, make entirely new symbols)
			li #{fmt("T_")} & #{fmt("D_")} are separate phonemes, differing in voicing (/#{"\u03B8"}/ & /#{fmt("d_")}/)
			li
				em '
				| #{space}is the Emphasis mark, and follows the emphasized syllable, though is absent from Cascadic
			li
				| Stratic is an Abugida (
				em X
				| #{space}is the#{space}
				q Null Consonant,
				| #{space}hence why it's absent from Cascadic)
			li Cascadic is an Alphabet
			li Stratic consonants have no inherent value
			li #{fmt("U__")} is absent from Stratic, as the dialect does not have the sound, but the Cascadic dialect does
			li Numerals in both scripts are base-12 (0-11)
			li Stratic is blocky, horizontal & carved in stone
			li Cascadic is  curved, vertical & etched along the wood grain
			li Cascadic has solo, initial, medial & final letter forms