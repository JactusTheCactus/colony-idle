-
	function capitalize(str) {
		return str.length > 1
			? [
				str.charAt(0).toUpperCase(),
				str.slice(1).toLowerCase()
			]
				.join("")
			: str.toUpperCase()
	}
-
	function upper(str) {
		return str.toUpperCase()
	}
-
	function lower(str) {
		return str.toLowerCase()
	}
-
	uni = [
		{
			_: "\u0301",
			d: "\u00F0",
			n: "\u014B",
			t: "\u00FE",
		},
		{
			_: "\u030C",
		},
	];
-
	function fmt(str) {
		return str
			.replace(
				/(\w)(_{1,2})/g,
				(match, letter, variant) => {
					let out = uni[variant.length - 1][letter.toLowerCase()]
						|| [
							letter,
							uni[variant.length - 1]["_"]
						]
							.join("");
					if (/\p{Lu}/u.test(letter)) {
						return out.toUpperCase()
					} else {
						return out.toLowerCase()
					}
			})
			.replace(
				/(\p{Script=Latin})'/gu,
				(match, letter) => {
					return [
						letter,
						"\u{0328}"
					].join("")
				})
			.normalize("NFC");
	}
-
	neo = [
		[
			"Cascadic",
			"Kaskadik",
			[
				"A",
				"B",
				"C",
				"D",
				"D_",
				"E",
				"E_",
				"F",
				"G",
				"H",
				"I",
				"I_",
				"J",
				"K",
				"L",
				"M",
				"N",
				"N_",
				"O",
				"O_",
				"P",
				"R",
				"S",
				"S_",
				"T",
				"T_",
				"U",
				"U_",
				"U__",
				"V",
				"W",
				"Y",
				"Z",
				"Z_"
			]
		],
		[
			"Stratic",
			"S_ra'tik",
			[]
		]
	]
-
	[
		"B",
		"C",
		"D",
		"D_",
		"F",
		"G",
		"H",
		"J",
		"K",
		"L",
		"M",
		"N",
		"N_",
		"P",
		"R",
		"S",
		"S_",
		"T",
		"T_",
		"V",
		"W",
		"X",
		"Y",
		"Z",
		"Z_"
	].forEach(c => {
		[
			"",
			"A",
			"E",
			"E_",
			"I",
			"I_",
			"O",
			"O_",
			"U",
			"U_"
		].forEach(v => {
			neo[1][2].push(
				capitalize(c+v)
			)
		})
	})
- space = " "
-
	neo = [
		"S_ra'tik",
		"Kaskadik"
	]
- str = fmt("S_ra'tik")
- cas = fmt("Kaskadik")
doctype html
html
	head
		title=neo.map(fmt).join(" & ")
		link(
			rel="stylesheet"
			href="test.css"
		)
	body
		h1 Stratic #{fmt("[S_ra'tik]")}
		table
			-
				vowels = [
					"",
					"A",
					"E",
					"E_",
					"I",
					"I_",
					"O",
					"O_",
					"U",
					"U_"
				]
			-
				consonants = [
					"",
					"B",
					"C",
					"D",
					"D_",
					"F",
					"G",
					"H",
					"J",
					"K",
					"L",
					"M",
					"N",
					"N_",
					"P",
					"R",
					"S",
					"S_",
					"T",
					"T_",
					"V",
					"W",
					"X",
					"Y",
					"Z",
					"Z_"
				]
			for v in vowels
				tr
					for c in consonants
						-
							pair = fmt([
								upper(c || v) || upper("C"),
								lower(v || c) || upper("V")
							].join(""))
						if !v || !c
							th= pair
						else
							td= fmt(pair+"'")
		h1 Cascadic #{fmt("[Kaskadik]")}
		-
			consonants = [
				"B",
				"C",
				"D",
				"D_",
				"F",
				"G",
				"H",
				"J",
				"K",
				"L",
				"M",
				"N",
				"N_",
				"P",
				"R",
				"S",
				"S_",
				"T",
				"T_",
				"V",
				"W",
				"Y",
				"Z",
				"Z_"
			]
		-
			vowels = [
				"A",
				"E",
				"E_",
				"I",
				"I_",
				"O",
				"O_",
				"U",
				"U_",
				"U__"
			]
		-
			set = [
				["Consonants", consonants],
				["Vowels", vowels]
			]
		for i in set
			h2= i[0]
			ul
				for c in i[1]
					li= capitalize(fmt(c.repeat(2)))
		h1 Notes
		ol
			li
				| For both scripts, diacritics#{space}
				em (other than Ogonek)
				| #{space}create separate letters, not variants
			li
				| in #{str}, the#{space}
				em Ogonek
				| #{space}marks emphasis, though it is absent from #{cas}
			li #{fmt("T_")} & #{fmt("D_")} are separate phonemes, differing in voicing (/#{"\u03B8"}/ & /#{fmt("d_")}/)
			li
				em '
				| #{space}is the Emphasis mark, and follows the emphasized syllable, though is absent from #{cas}
			li
				| #{str} is an Abugida (
				em X
				| #{space}is the#{space}
				q Null Consonant,
				| #{space}hence why it's absent from #{cas})
			li #{cas} is an Alphabet
			li #{str} consonants have no inherent value
			li #{fmt("U__")} is absent from #{str}, as the dialect does not have the sound, but the #{cas} dialect does
			li Numerals in both scripts are base-12 (0-11)
			li #{str} is blocky, horizontal & carved in stone
			li #{cas} is  curved, vertical & etched along the wood grain
			li #{cas} has solo, initial, medial & final letter forms